// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sensor.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sensor {

  /// <summary>Holder for reflection information generated from sensor.proto</summary>
  public static partial class SensorReflection {

    #region Descriptor
    /// <summary>File descriptor for sensor.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SensorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzZW5zb3IucHJvdG8SBnNlbnNvchoJc3RkLnByb3RvGg5nZW9tZXRyeS5w",
            "cm90byKQAgoDSW11EhsKBmhlYWRlchgBIAEoCzILLnN0ZC5IZWFkZXISKQoL",
            "b3JpZW50YXRpb24YAiABKAsyFC5nZW9tZXRyeS5RdWF0ZXJuaW9uEh0KFW9y",
            "aWVudGF0aW9uQ292YXJpYW5jZRgDIAMoARIqCg9hbmd1bGFyVmVsb2NpdHkY",
            "BCABKAsyES5nZW9tZXRyeS5WZWN0b3IzEiEKGWFuZ3VsYXJWZWxvY2l0eUNv",
            "dmFyaWFuY2UYBSADKAESLQoSbGluZWFyQWNjZWxlcmF0aW9uGAYgASgLMhEu",
            "Z2VvbWV0cnkuVmVjdG9yMxIkChxsaW5lYXJBY2NlbGVyYXRpb25Db3Zhcmlh",
            "bmNlGAcgAygBIvMBCgxOYXZTYXRTdGF0dXMSKwoGc3RhdHVzGAEgASgOMhsu",
            "c2Vuc29yLk5hdlNhdFN0YXR1cy5TdGF0dXMSLQoHc2VydmljZRgCIAEoDjIc",
            "LnNlbnNvci5OYXZTYXRTdGF0dXMuU2VydmljZSJCCgZTdGF0dXMSBwoDRklY",
            "EAASDAoIU0JBU19GSVgQARIMCghHQkFTX0ZJWBACEhMKBk5PX0ZJWBD/////",
            "//////8BIkMKB1NlcnZpY2USCAoETk9ORRAAEgcKA0dQUxABEgsKB0dMT05B",
            "U1MQAhILCgdDT01QQVNTEAQSCwoHR0FMSUxFTxAIIqEBCglOYXZTYXRGaXgS",
            "GwoGaGVhZGVyGAEgASgLMgsuc3RkLkhlYWRlchIkCgZzdGF0dXMYAiABKAsy",
            "FC5zZW5zb3IuTmF2U2F0U3RhdHVzEhAKCGxhdGl0dWRlGAMgASgBEhEKCWxv",
            "bmdpdHVkZRgEIAEoARIQCghhbHRpdHVkZRgFIAEoARIaChJwb3NpdGlvbkNv",
            "dmFyaWFuY2UYBiADKAEiJwoHQ2hhbm5lbBIMCgRuYW1lGAEgASgJEg4KBnZh",
            "bHVlcxgCIAMoASLRAQoKUG9pbnRGaWVsZBIMCgRuYW1lGAEgASgJEg4KBm9m",
            "ZnNldBgCIAEoDRItCghkYXRhdHlwZRgDIAEoDjIbLnNlbnNvci5Qb2ludEZp",
            "ZWxkLkRhdGFUeXBlEg0KBWNvdW50GAQgASgNImcKCERhdGFUeXBlEggKBElO",
            "VDgQABIJCgVVSU5UOBABEgkKBUlOVDE2EAISCgoGVUlOVDE2EAMSCQoFSU5U",
            "MzIQBBIKCgZVSU5UMzIQBRILCgdGTE9BVDMyEAYSCwoHRkxPQVQ2NBAHIm0K",
            "ClBvaW50Q2xvdWQSGwoGaGVhZGVyGAEgASgLMgsuc3RkLkhlYWRlchIfCgZw",
            "b2ludHMYAiADKAsyDy5nZW9tZXRyeS5Qb2ludBIhCghjaGFubmVscxgDIAMo",
            "CzIPLnNlbnNvci5DaGFubmVsItwBCgtQb2ludENsb3VkMhIbCgZoZWFkZXIY",
            "ASABKAsyCy5zdGQuSGVhZGVyEhUKDXRpbWVJblNlY29uZHMYAiABKAESDgoG",
            "aGVpZ2h0GAMgASgNEg0KBXdpZHRoGAQgASgNEiIKBmZpZWxkcxgFIAMoCzIS",
            "LnNlbnNvci5Qb2ludEZpZWxkEhMKC2lzQmlnRW5kaWFuGAYgASgIEhEKCXBv",
            "aW50U3RlcBgHIAEoDRIPCgdyb3dTdGVwGAggASgNEgwKBGRhdGEYCSABKAwS",
            "DwoHaXNEZW5zZRgKIAEoCCKGAQoFSW1hZ2USGwoGaGVhZGVyGAEgASgLMgsu",
            "c3RkLkhlYWRlchIOCgZoZWlnaHQYAiABKA0SDQoFd2lkdGgYAyABKA0SEAoI",
            "ZW5jb2RpbmcYBCABKAkSEwoLaXNCaWdFbmRpYW4YBSABKAgSDAoEc3RlcBgG",
            "IAEoDRIMCgRkYXRhGAcgASgMIkwKD0NvbXByZXNzZWRJbWFnZRIbCgZoZWFk",
            "ZXIYASABKAsyCy5zdGQuSGVhZGVyEg4KBmZvcm1hdBgCIAEoCRIMCgRkYXRh",
            "GAMgASgMYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Std.StdReflection.Descriptor, global::Geometry.GeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensor.Imu), global::Sensor.Imu.Parser, new[]{ "Header", "Orientation", "OrientationCovariance", "AngularVelocity", "AngularVelocityCovariance", "LinearAcceleration", "LinearAccelerationCovariance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensor.NavSatStatus), global::Sensor.NavSatStatus.Parser, new[]{ "Status", "Service" }, null, new[]{ typeof(global::Sensor.NavSatStatus.Types.Status), typeof(global::Sensor.NavSatStatus.Types.Service) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensor.NavSatFix), global::Sensor.NavSatFix.Parser, new[]{ "Header", "Status", "Latitude", "Longitude", "Altitude", "PositionCovariance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensor.Channel), global::Sensor.Channel.Parser, new[]{ "Name", "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensor.PointField), global::Sensor.PointField.Parser, new[]{ "Name", "Offset", "Datatype", "Count" }, null, new[]{ typeof(global::Sensor.PointField.Types.DataType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensor.PointCloud), global::Sensor.PointCloud.Parser, new[]{ "Header", "Points", "Channels" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensor.PointCloud2), global::Sensor.PointCloud2.Parser, new[]{ "Header", "TimeInSeconds", "Height", "Width", "Fields", "IsBigEndian", "PointStep", "RowStep", "Data", "IsDense" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensor.Image), global::Sensor.Image.Parser, new[]{ "Header", "Height", "Width", "Encoding", "IsBigEndian", "Step", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensor.CompressedImage), global::Sensor.CompressedImage.Parser, new[]{ "Header", "Format", "Data" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Imu : pb::IMessage<Imu> {
    private static readonly pb::MessageParser<Imu> _parser = new pb::MessageParser<Imu>(() => new Imu());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Imu> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensor.SensorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Imu() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Imu(Imu other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      orientation_ = other.orientation_ != null ? other.orientation_.Clone() : null;
      orientationCovariance_ = other.orientationCovariance_.Clone();
      angularVelocity_ = other.angularVelocity_ != null ? other.angularVelocity_.Clone() : null;
      angularVelocityCovariance_ = other.angularVelocityCovariance_.Clone();
      linearAcceleration_ = other.linearAcceleration_ != null ? other.linearAcceleration_.Clone() : null;
      linearAccelerationCovariance_ = other.linearAccelerationCovariance_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Imu Clone() {
      return new Imu(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Std.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Std.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 2;
    private global::Geometry.Quaternion orientation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Geometry.Quaternion Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    /// <summary>Field number for the "orientationCovariance" field.</summary>
    public const int OrientationCovarianceFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_orientationCovariance_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> orientationCovariance_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> OrientationCovariance {
      get { return orientationCovariance_; }
    }

    /// <summary>Field number for the "angularVelocity" field.</summary>
    public const int AngularVelocityFieldNumber = 4;
    private global::Geometry.Vector3 angularVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Geometry.Vector3 AngularVelocity {
      get { return angularVelocity_; }
      set {
        angularVelocity_ = value;
      }
    }

    /// <summary>Field number for the "angularVelocityCovariance" field.</summary>
    public const int AngularVelocityCovarianceFieldNumber = 5;
    private static readonly pb::FieldCodec<double> _repeated_angularVelocityCovariance_codec
        = pb::FieldCodec.ForDouble(42);
    private readonly pbc::RepeatedField<double> angularVelocityCovariance_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> AngularVelocityCovariance {
      get { return angularVelocityCovariance_; }
    }

    /// <summary>Field number for the "linearAcceleration" field.</summary>
    public const int LinearAccelerationFieldNumber = 6;
    private global::Geometry.Vector3 linearAcceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Geometry.Vector3 LinearAcceleration {
      get { return linearAcceleration_; }
      set {
        linearAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "linearAccelerationCovariance" field.</summary>
    public const int LinearAccelerationCovarianceFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_linearAccelerationCovariance_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> linearAccelerationCovariance_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> LinearAccelerationCovariance {
      get { return linearAccelerationCovariance_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Imu);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Imu other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Orientation, other.Orientation)) return false;
      if(!orientationCovariance_.Equals(other.orientationCovariance_)) return false;
      if (!object.Equals(AngularVelocity, other.AngularVelocity)) return false;
      if(!angularVelocityCovariance_.Equals(other.angularVelocityCovariance_)) return false;
      if (!object.Equals(LinearAcceleration, other.LinearAcceleration)) return false;
      if(!linearAccelerationCovariance_.Equals(other.linearAccelerationCovariance_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (orientation_ != null) hash ^= Orientation.GetHashCode();
      hash ^= orientationCovariance_.GetHashCode();
      if (angularVelocity_ != null) hash ^= AngularVelocity.GetHashCode();
      hash ^= angularVelocityCovariance_.GetHashCode();
      if (linearAcceleration_ != null) hash ^= LinearAcceleration.GetHashCode();
      hash ^= linearAccelerationCovariance_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (orientation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Orientation);
      }
      orientationCovariance_.WriteTo(output, _repeated_orientationCovariance_codec);
      if (angularVelocity_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AngularVelocity);
      }
      angularVelocityCovariance_.WriteTo(output, _repeated_angularVelocityCovariance_codec);
      if (linearAcceleration_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LinearAcceleration);
      }
      linearAccelerationCovariance_.WriteTo(output, _repeated_linearAccelerationCovariance_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (orientation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
      }
      size += orientationCovariance_.CalculateSize(_repeated_orientationCovariance_codec);
      if (angularVelocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AngularVelocity);
      }
      size += angularVelocityCovariance_.CalculateSize(_repeated_angularVelocityCovariance_codec);
      if (linearAcceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearAcceleration);
      }
      size += linearAccelerationCovariance_.CalculateSize(_repeated_linearAccelerationCovariance_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Imu other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Std.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.orientation_ != null) {
        if (orientation_ == null) {
          orientation_ = new global::Geometry.Quaternion();
        }
        Orientation.MergeFrom(other.Orientation);
      }
      orientationCovariance_.Add(other.orientationCovariance_);
      if (other.angularVelocity_ != null) {
        if (angularVelocity_ == null) {
          angularVelocity_ = new global::Geometry.Vector3();
        }
        AngularVelocity.MergeFrom(other.AngularVelocity);
      }
      angularVelocityCovariance_.Add(other.angularVelocityCovariance_);
      if (other.linearAcceleration_ != null) {
        if (linearAcceleration_ == null) {
          linearAcceleration_ = new global::Geometry.Vector3();
        }
        LinearAcceleration.MergeFrom(other.LinearAcceleration);
      }
      linearAccelerationCovariance_.Add(other.linearAccelerationCovariance_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Std.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            if (orientation_ == null) {
              orientation_ = new global::Geometry.Quaternion();
            }
            input.ReadMessage(orientation_);
            break;
          }
          case 26:
          case 25: {
            orientationCovariance_.AddEntriesFrom(input, _repeated_orientationCovariance_codec);
            break;
          }
          case 34: {
            if (angularVelocity_ == null) {
              angularVelocity_ = new global::Geometry.Vector3();
            }
            input.ReadMessage(angularVelocity_);
            break;
          }
          case 42:
          case 41: {
            angularVelocityCovariance_.AddEntriesFrom(input, _repeated_angularVelocityCovariance_codec);
            break;
          }
          case 50: {
            if (linearAcceleration_ == null) {
              linearAcceleration_ = new global::Geometry.Vector3();
            }
            input.ReadMessage(linearAcceleration_);
            break;
          }
          case 58:
          case 57: {
            linearAccelerationCovariance_.AddEntriesFrom(input, _repeated_linearAccelerationCovariance_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NavSatStatus : pb::IMessage<NavSatStatus> {
    private static readonly pb::MessageParser<NavSatStatus> _parser = new pb::MessageParser<NavSatStatus>(() => new NavSatStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavSatStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensor.SensorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavSatStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavSatStatus(NavSatStatus other) : this() {
      status_ = other.status_;
      service_ = other.service_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavSatStatus Clone() {
      return new NavSatStatus(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Sensor.NavSatStatus.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sensor.NavSatStatus.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 2;
    private global::Sensor.NavSatStatus.Types.Service service_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sensor.NavSatStatus.Types.Service Service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavSatStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavSatStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Service != other.Service) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Service != 0) hash ^= Service.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Service != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Service);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Service != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Service);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavSatStatus other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Service != 0) {
        Service = other.Service;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Sensor.NavSatStatus.Types.Status) input.ReadEnum();
            break;
          }
          case 16: {
            service_ = (global::Sensor.NavSatStatus.Types.Service) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NavSatStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("FIX")] Fix = 0,
        [pbr::OriginalName("SBAS_FIX")] SbasFix = 1,
        [pbr::OriginalName("GBAS_FIX")] GbasFix = 2,
        [pbr::OriginalName("NO_FIX")] NoFix = -1,
      }

      public enum Service {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("GPS")] Gps = 1,
        [pbr::OriginalName("GLONASS")] Glonass = 2,
        [pbr::OriginalName("COMPASS")] Compass = 4,
        [pbr::OriginalName("GALILEO")] Galileo = 8,
      }

    }
    #endregion

  }

  public sealed partial class NavSatFix : pb::IMessage<NavSatFix> {
    private static readonly pb::MessageParser<NavSatFix> _parser = new pb::MessageParser<NavSatFix>(() => new NavSatFix());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavSatFix> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensor.SensorReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavSatFix() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavSatFix(NavSatFix other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      altitude_ = other.altitude_;
      positionCovariance_ = other.positionCovariance_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavSatFix Clone() {
      return new NavSatFix(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Std.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Std.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Sensor.NavSatStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sensor.NavSatStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 3;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 4;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "altitude" field.</summary>
    public const int AltitudeFieldNumber = 5;
    private double altitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Altitude {
      get { return altitude_; }
      set {
        altitude_ = value;
      }
    }

    /// <summary>Field number for the "positionCovariance" field.</summary>
    public const int PositionCovarianceFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_positionCovariance_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> positionCovariance_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> PositionCovariance {
      get { return positionCovariance_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavSatFix);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavSatFix other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Altitude, other.Altitude)) return false;
      if(!positionCovariance_.Equals(other.positionCovariance_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (Latitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Latitude);
      if (Longitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Longitude);
      if (Altitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Altitude);
      hash ^= positionCovariance_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (status_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Status);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Longitude);
      }
      if (Altitude != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Altitude);
      }
      positionCovariance_.WriteTo(output, _repeated_positionCovariance_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (Altitude != 0D) {
        size += 1 + 8;
      }
      size += positionCovariance_.CalculateSize(_repeated_positionCovariance_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavSatFix other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Std.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Sensor.NavSatStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.Altitude != 0D) {
        Altitude = other.Altitude;
      }
      positionCovariance_.Add(other.positionCovariance_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Std.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            if (status_ == null) {
              status_ = new global::Sensor.NavSatStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 25: {
            Latitude = input.ReadDouble();
            break;
          }
          case 33: {
            Longitude = input.ReadDouble();
            break;
          }
          case 41: {
            Altitude = input.ReadDouble();
            break;
          }
          case 50:
          case 49: {
            positionCovariance_.AddEntriesFrom(input, _repeated_positionCovariance_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Channel : pb::IMessage<Channel> {
    private static readonly pb::MessageParser<Channel> _parser = new pb::MessageParser<Channel>(() => new Channel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Channel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensor.SensorReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel(Channel other) : this() {
      name_ = other.name_;
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel Clone() {
      return new Channel(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_values_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> values_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Channel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Channel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Channel other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18:
          case 17: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PointField : pb::IMessage<PointField> {
    private static readonly pb::MessageParser<PointField> _parser = new pb::MessageParser<PointField>(() => new PointField());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointField> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensor.SensorReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointField() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointField(PointField other) : this() {
      name_ = other.name_;
      offset_ = other.offset_;
      datatype_ = other.datatype_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointField Clone() {
      return new PointField(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private uint offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "datatype" field.</summary>
    public const int DatatypeFieldNumber = 3;
    private global::Sensor.PointField.Types.DataType datatype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sensor.PointField.Types.DataType Datatype {
      get { return datatype_; }
      set {
        datatype_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointField);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointField other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Offset != other.Offset) return false;
      if (Datatype != other.Datatype) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (Datatype != 0) hash ^= Datatype.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Offset != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Offset);
      }
      if (Datatype != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Datatype);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Offset);
      }
      if (Datatype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Datatype);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointField other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.Datatype != 0) {
        Datatype = other.Datatype;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Offset = input.ReadUInt32();
            break;
          }
          case 24: {
            datatype_ = (global::Sensor.PointField.Types.DataType) input.ReadEnum();
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PointField message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DataType {
        [pbr::OriginalName("INT8")] Int8 = 0,
        [pbr::OriginalName("UINT8")] Uint8 = 1,
        [pbr::OriginalName("INT16")] Int16 = 2,
        [pbr::OriginalName("UINT16")] Uint16 = 3,
        [pbr::OriginalName("INT32")] Int32 = 4,
        [pbr::OriginalName("UINT32")] Uint32 = 5,
        [pbr::OriginalName("FLOAT32")] Float32 = 6,
        [pbr::OriginalName("FLOAT64")] Float64 = 7,
      }

    }
    #endregion

  }

  public sealed partial class PointCloud : pb::IMessage<PointCloud> {
    private static readonly pb::MessageParser<PointCloud> _parser = new pb::MessageParser<PointCloud>(() => new PointCloud());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointCloud> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensor.SensorReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloud() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloud(PointCloud other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      points_ = other.points_.Clone();
      channels_ = other.channels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloud Clone() {
      return new PointCloud(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Std.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Std.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Geometry.Point> _repeated_points_codec
        = pb::FieldCodec.ForMessage(18, global::Geometry.Point.Parser);
    private readonly pbc::RepeatedField<global::Geometry.Point> points_ = new pbc::RepeatedField<global::Geometry.Point>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Geometry.Point> Points {
      get { return points_; }
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Sensor.Channel> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(26, global::Sensor.Channel.Parser);
    private readonly pbc::RepeatedField<global::Sensor.Channel> channels_ = new pbc::RepeatedField<global::Sensor.Channel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sensor.Channel> Channels {
      get { return channels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointCloud);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointCloud other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!points_.Equals(other.points_)) return false;
      if(!channels_.Equals(other.channels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= points_.GetHashCode();
      hash ^= channels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      points_.WriteTo(output, _repeated_points_codec);
      channels_.WriteTo(output, _repeated_channels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += points_.CalculateSize(_repeated_points_codec);
      size += channels_.CalculateSize(_repeated_channels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointCloud other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Std.Header();
        }
        Header.MergeFrom(other.Header);
      }
      points_.Add(other.points_);
      channels_.Add(other.channels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Std.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
          case 26: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PointCloud2 : pb::IMessage<PointCloud2> {
    private static readonly pb::MessageParser<PointCloud2> _parser = new pb::MessageParser<PointCloud2>(() => new PointCloud2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointCloud2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensor.SensorReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloud2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloud2(PointCloud2 other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      timeInSeconds_ = other.timeInSeconds_;
      height_ = other.height_;
      width_ = other.width_;
      fields_ = other.fields_.Clone();
      isBigEndian_ = other.isBigEndian_;
      pointStep_ = other.pointStep_;
      rowStep_ = other.rowStep_;
      data_ = other.data_;
      isDense_ = other.isDense_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloud2 Clone() {
      return new PointCloud2(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Std.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Std.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "timeInSeconds" field.</summary>
    public const int TimeInSecondsFieldNumber = 2;
    private double timeInSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeInSeconds {
      get { return timeInSeconds_; }
      set {
        timeInSeconds_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 4;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Sensor.PointField> _repeated_fields_codec
        = pb::FieldCodec.ForMessage(42, global::Sensor.PointField.Parser);
    private readonly pbc::RepeatedField<global::Sensor.PointField> fields_ = new pbc::RepeatedField<global::Sensor.PointField>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sensor.PointField> Fields {
      get { return fields_; }
    }

    /// <summary>Field number for the "isBigEndian" field.</summary>
    public const int IsBigEndianFieldNumber = 6;
    private bool isBigEndian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBigEndian {
      get { return isBigEndian_; }
      set {
        isBigEndian_ = value;
      }
    }

    /// <summary>Field number for the "pointStep" field.</summary>
    public const int PointStepFieldNumber = 7;
    private uint pointStep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PointStep {
      get { return pointStep_; }
      set {
        pointStep_ = value;
      }
    }

    /// <summary>Field number for the "rowStep" field.</summary>
    public const int RowStepFieldNumber = 8;
    private uint rowStep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RowStep {
      get { return rowStep_; }
      set {
        rowStep_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 9;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isDense" field.</summary>
    public const int IsDenseFieldNumber = 10;
    private bool isDense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDense {
      get { return isDense_; }
      set {
        isDense_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointCloud2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointCloud2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TimeInSeconds, other.TimeInSeconds)) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      if(!fields_.Equals(other.fields_)) return false;
      if (IsBigEndian != other.IsBigEndian) return false;
      if (PointStep != other.PointStep) return false;
      if (RowStep != other.RowStep) return false;
      if (Data != other.Data) return false;
      if (IsDense != other.IsDense) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (TimeInSeconds != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TimeInSeconds);
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      hash ^= fields_.GetHashCode();
      if (IsBigEndian != false) hash ^= IsBigEndian.GetHashCode();
      if (PointStep != 0) hash ^= PointStep.GetHashCode();
      if (RowStep != 0) hash ^= RowStep.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (IsDense != false) hash ^= IsDense.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (TimeInSeconds != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TimeInSeconds);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Height);
      }
      if (Width != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Width);
      }
      fields_.WriteTo(output, _repeated_fields_codec);
      if (IsBigEndian != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsBigEndian);
      }
      if (PointStep != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(PointStep);
      }
      if (RowStep != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(RowStep);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(Data);
      }
      if (IsDense != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsDense);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (TimeInSeconds != 0D) {
        size += 1 + 8;
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      size += fields_.CalculateSize(_repeated_fields_codec);
      if (IsBigEndian != false) {
        size += 1 + 1;
      }
      if (PointStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PointStep);
      }
      if (RowStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RowStep);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (IsDense != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointCloud2 other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Std.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.TimeInSeconds != 0D) {
        TimeInSeconds = other.TimeInSeconds;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      fields_.Add(other.fields_);
      if (other.IsBigEndian != false) {
        IsBigEndian = other.IsBigEndian;
      }
      if (other.PointStep != 0) {
        PointStep = other.PointStep;
      }
      if (other.RowStep != 0) {
        RowStep = other.RowStep;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.IsDense != false) {
        IsDense = other.IsDense;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Std.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 17: {
            TimeInSeconds = input.ReadDouble();
            break;
          }
          case 24: {
            Height = input.ReadUInt32();
            break;
          }
          case 32: {
            Width = input.ReadUInt32();
            break;
          }
          case 42: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
          case 48: {
            IsBigEndian = input.ReadBool();
            break;
          }
          case 56: {
            PointStep = input.ReadUInt32();
            break;
          }
          case 64: {
            RowStep = input.ReadUInt32();
            break;
          }
          case 74: {
            Data = input.ReadBytes();
            break;
          }
          case 80: {
            IsDense = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Image : pb::IMessage<Image> {
    private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Image> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensor.SensorReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image(Image other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      height_ = other.height_;
      width_ = other.width_;
      encoding_ = other.encoding_;
      isBigEndian_ = other.isBigEndian_;
      step_ = other.step_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image Clone() {
      return new Image(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Std.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Std.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "encoding" field.</summary>
    public const int EncodingFieldNumber = 4;
    private string encoding_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Encoding {
      get { return encoding_; }
      set {
        encoding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isBigEndian" field.</summary>
    public const int IsBigEndianFieldNumber = 5;
    private bool isBigEndian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBigEndian {
      get { return isBigEndian_; }
      set {
        isBigEndian_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 6;
    private uint step_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 7;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Image);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Image other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      if (Encoding != other.Encoding) return false;
      if (IsBigEndian != other.IsBigEndian) return false;
      if (Step != other.Step) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Encoding.Length != 0) hash ^= Encoding.GetHashCode();
      if (IsBigEndian != false) hash ^= IsBigEndian.GetHashCode();
      if (Step != 0) hash ^= Step.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Height);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Width);
      }
      if (Encoding.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Encoding);
      }
      if (IsBigEndian != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsBigEndian);
      }
      if (Step != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Step);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Encoding.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Encoding);
      }
      if (IsBigEndian != false) {
        size += 1 + 1;
      }
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Step);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Image other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Std.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Encoding.Length != 0) {
        Encoding = other.Encoding;
      }
      if (other.IsBigEndian != false) {
        IsBigEndian = other.IsBigEndian;
      }
      if (other.Step != 0) {
        Step = other.Step;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Std.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 16: {
            Height = input.ReadUInt32();
            break;
          }
          case 24: {
            Width = input.ReadUInt32();
            break;
          }
          case 34: {
            Encoding = input.ReadString();
            break;
          }
          case 40: {
            IsBigEndian = input.ReadBool();
            break;
          }
          case 48: {
            Step = input.ReadUInt32();
            break;
          }
          case 58: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CompressedImage : pb::IMessage<CompressedImage> {
    private static readonly pb::MessageParser<CompressedImage> _parser = new pb::MessageParser<CompressedImage>(() => new CompressedImage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompressedImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensor.SensorReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompressedImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompressedImage(CompressedImage other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      format_ = other.format_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompressedImage Clone() {
      return new CompressedImage(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Std.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Std.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 2;
    private string format_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Format {
      get { return format_; }
      set {
        format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompressedImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompressedImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Format != other.Format) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Format.Length != 0) hash ^= Format.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Format.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Format);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Format.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompressedImage other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Std.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Format.Length != 0) {
        Format = other.Format;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Std.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            Format = input.ReadString();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
