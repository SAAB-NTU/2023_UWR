// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tf.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Tf {
  public static partial class Tf
  {
    static readonly string __ServiceName = "tf.Tf";

    static readonly grpc::Marshaller<global::Std.Empty> __Marshaller_std_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Std.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tf.TfFrameList> __Marshaller_tf_TfFrameList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tf.TfFrameList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tf.TfFrameRequest> __Marshaller_tf_TfFrameRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tf.TfFrameRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tf.TfFrame> __Marshaller_tf_TfFrame = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tf.TfFrame.Parser.ParseFrom);

    static readonly grpc::Method<global::Std.Empty, global::Tf.TfFrameList> __Method_GetAllFrames = new grpc::Method<global::Std.Empty, global::Tf.TfFrameList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllFrames",
        __Marshaller_std_Empty,
        __Marshaller_tf_TfFrameList);

    static readonly grpc::Method<global::Tf.TfFrameRequest, global::Tf.TfFrame> __Method_GetFrame = new grpc::Method<global::Tf.TfFrameRequest, global::Tf.TfFrame>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFrame",
        __Marshaller_tf_TfFrameRequest,
        __Marshaller_tf_TfFrame);

    static readonly grpc::Method<global::Std.Empty, global::Tf.TfFrameList> __Method_StreamAllFrames = new grpc::Method<global::Std.Empty, global::Tf.TfFrameList>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamAllFrames",
        __Marshaller_std_Empty,
        __Marshaller_tf_TfFrameList);

    static readonly grpc::Method<global::Tf.TfFrameRequest, global::Tf.TfFrame> __Method_StreamFrame = new grpc::Method<global::Tf.TfFrameRequest, global::Tf.TfFrame>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamFrame",
        __Marshaller_tf_TfFrameRequest,
        __Marshaller_tf_TfFrame);

    static readonly grpc::Method<global::Tf.TfFrame, global::Std.Empty> __Method_PublishFrame = new grpc::Method<global::Tf.TfFrame, global::Std.Empty>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "PublishFrame",
        __Marshaller_tf_TfFrame,
        __Marshaller_std_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tf.TfReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Tf</summary>
    public abstract partial class TfBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Tf.TfFrameList> GetAllFrames(global::Std.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tf.TfFrame> GetFrame(global::Tf.TfFrameRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task StreamAllFrames(global::Std.Empty request, grpc::IServerStreamWriter<global::Tf.TfFrameList> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task StreamFrame(global::Tf.TfFrameRequest request, grpc::IServerStreamWriter<global::Tf.TfFrame> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Std.Empty> PublishFrame(grpc::IAsyncStreamReader<global::Tf.TfFrame> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Tf</summary>
    public partial class TfClient : grpc::ClientBase<TfClient>
    {
      /// <summary>Creates a new client for Tf</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TfClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Tf that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TfClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TfClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TfClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Tf.TfFrameList GetAllFrames(global::Std.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllFrames(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tf.TfFrameList GetAllFrames(global::Std.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllFrames, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tf.TfFrameList> GetAllFramesAsync(global::Std.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllFramesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tf.TfFrameList> GetAllFramesAsync(global::Std.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllFrames, null, options, request);
      }
      public virtual global::Tf.TfFrame GetFrame(global::Tf.TfFrameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFrame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tf.TfFrame GetFrame(global::Tf.TfFrameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFrame, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tf.TfFrame> GetFrameAsync(global::Tf.TfFrameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFrameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tf.TfFrame> GetFrameAsync(global::Tf.TfFrameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFrame, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Tf.TfFrameList> StreamAllFrames(global::Std.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamAllFrames(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Tf.TfFrameList> StreamAllFrames(global::Std.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamAllFrames, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Tf.TfFrame> StreamFrame(global::Tf.TfFrameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamFrame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Tf.TfFrame> StreamFrame(global::Tf.TfFrameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamFrame, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Tf.TfFrame, global::Std.Empty> PublishFrame(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PublishFrame(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Tf.TfFrame, global::Std.Empty> PublishFrame(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_PublishFrame, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TfClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TfClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TfBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAllFrames, serviceImpl.GetAllFrames)
          .AddMethod(__Method_GetFrame, serviceImpl.GetFrame)
          .AddMethod(__Method_StreamAllFrames, serviceImpl.StreamAllFrames)
          .AddMethod(__Method_StreamFrame, serviceImpl.StreamFrame)
          .AddMethod(__Method_PublishFrame, serviceImpl.PublishFrame).Build();
    }

  }
}
#endregion
