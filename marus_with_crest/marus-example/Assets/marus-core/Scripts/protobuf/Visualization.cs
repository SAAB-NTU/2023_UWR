// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: visualization.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Visualization {

  /// <summary>Holder for reflection information generated from visualization.proto</summary>
  public static partial class VisualizationReflection {

    #region Descriptor
    /// <summary>File descriptor for visualization.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VisualizationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN2aXN1YWxpemF0aW9uLnByb3RvEg12aXN1YWxpemF0aW9uGglzdGQucHJv",
            "dG8aDmdlb21ldHJ5LnByb3RvIiAKDU1hcmtlclJlcXVlc3QSDwoHYWRkcmVz",
            "cxgBIAEoCSKbBQoGTWFya2VyEhsKBmhlYWRlchgBIAEoCzILLnN0ZC5IZWFk",
            "ZXISCgoCbnMYAiABKAkSCgoCaWQYAyABKAUSKAoEdHlwZRgEIAEoDjIaLnZp",
            "c3VhbGl6YXRpb24uTWFya2VyLlR5cGUSLAoGYWN0aW9uGAUgASgOMhwudmlz",
            "dWFsaXphdGlvbi5NYXJrZXIuQWN0aW9uEhwKBHBvc2UYBiABKAsyDi5nZW9t",
            "ZXRyeS5Qb3NlEiAKBXNjYWxlGAcgASgLMhEuZ2VvbWV0cnkuVmVjdG9yMxId",
            "CgVjb2xvchgIIAEoCzIOLnN0ZC5Db2xvclJHQkESEAoIbGlmZXRpbWUYCSAB",
            "KAISEwoLZnJhbWVMb2NrZWQYCiABKAgSHwoGcG9pbnRzGAsgAygLMg8uZ2Vv",
            "bWV0cnkuUG9pbnQSHgoGY29sb3JzGAwgAygLMg4uc3RkLkNvbG9yUkdCQRIM",
            "CgR0ZXh0GA0gASgJEhQKDG1lc2hSZXNvdXJjZRgOIAEoCRIgChhtZXNoVXNl",
            "RW1iZWRkZWRNYXRlcmlhbHMYDyABKAgivAEKBFR5cGUSCQoFQVJST1cQABII",
            "CgRDVUJFEAESCgoGU1BIRVJFEAISDAoIQ1lMSU5ERVIQAxIOCgpMSU5FX1NU",
            "UklQEAQSDQoJTElORV9MSVNUEAUSDQoJQ1VCRV9MSVNUEAYSDwoLU1BIRVJF",
            "X0xJU1QQBxIKCgZQT0lOVFMQCBIUChBURVhUX1ZJRVdfRkFDSU5HEAkSEQoN",
            "TUVTSF9SRVNPVVJDRRAKEhEKDVRSSUFOR0xFX0xJU1QQCyI4CgZBY3Rpb24S",
            "BwoDQUREEAASCgoGTU9ESUZZEAESCgoGREVMRVRFEAISDQoJREVMRVRFQUxM",
            "EAMiUgoLTWFya2VyQXJyYXkSGwoGaGVhZGVyGAEgASgLMgsuc3RkLkhlYWRl",
            "chImCgdtYXJrZXJzGAIgAygLMhUudmlzdWFsaXphdGlvbi5NYXJrZXIypQEK",
            "DVZpc3VhbGl6YXRpb24SRAoJU2V0TWFya2VyEhwudmlzdWFsaXphdGlvbi5N",
            "YXJrZXJSZXF1ZXN0GhUudmlzdWFsaXphdGlvbi5NYXJrZXIiADABEk4KDlNl",
            "dE1hcmtlckFycmF5EhwudmlzdWFsaXphdGlvbi5NYXJrZXJSZXF1ZXN0Ghou",
            "dmlzdWFsaXphdGlvbi5NYXJrZXJBcnJheSIAMAFCNwoeaW8uZ3JwYy5leGFt",
            "cGxlcy52aXN1YWxpemF0aW9uQg1WaXN1YWxpemF0aW9uUAGiAgNITFdiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Std.StdReflection.Descriptor, global::Geometry.GeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Visualization.MarkerRequest), global::Visualization.MarkerRequest.Parser, new[]{ "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Visualization.Marker), global::Visualization.Marker.Parser, new[]{ "Header", "Ns", "Id", "Type", "Action", "Pose", "Scale", "Color", "Lifetime", "FrameLocked", "Points", "Colors", "Text", "MeshResource", "MeshUseEmbeddedMaterials" }, null, new[]{ typeof(global::Visualization.Marker.Types.Type), typeof(global::Visualization.Marker.Types.Action) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Visualization.MarkerArray), global::Visualization.MarkerArray.Parser, new[]{ "Header", "Markers" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MarkerRequest : pb::IMessage<MarkerRequest> {
    private static readonly pb::MessageParser<MarkerRequest> _parser = new pb::MessageParser<MarkerRequest>(() => new MarkerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarkerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Visualization.VisualizationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerRequest(MarkerRequest other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerRequest Clone() {
      return new MarkerRequest(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarkerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarkerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarkerRequest other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Marker : pb::IMessage<Marker> {
    private static readonly pb::MessageParser<Marker> _parser = new pb::MessageParser<Marker>(() => new Marker());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Marker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Visualization.VisualizationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Marker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Marker(Marker other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      ns_ = other.ns_;
      id_ = other.id_;
      type_ = other.type_;
      action_ = other.action_;
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      lifetime_ = other.lifetime_;
      frameLocked_ = other.frameLocked_;
      points_ = other.points_.Clone();
      colors_ = other.colors_.Clone();
      text_ = other.text_;
      meshResource_ = other.meshResource_;
      meshUseEmbeddedMaterials_ = other.meshUseEmbeddedMaterials_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Marker Clone() {
      return new Marker(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Std.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Std.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "ns" field.</summary>
    public const int NsFieldNumber = 2;
    private string ns_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ns {
      get { return ns_; }
      set {
        ns_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Visualization.Marker.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Visualization.Marker.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 5;
    private global::Visualization.Marker.Types.Action action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Visualization.Marker.Types.Action Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 6;
    private global::Geometry.Pose pose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Geometry.Pose Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 7;
    private global::Geometry.Vector3 scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Geometry.Vector3 Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 8;
    private global::Std.ColorRGBA color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Std.ColorRGBA Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "lifetime" field.</summary>
    public const int LifetimeFieldNumber = 9;
    private float lifetime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Lifetime {
      get { return lifetime_; }
      set {
        lifetime_ = value;
      }
    }

    /// <summary>Field number for the "frameLocked" field.</summary>
    public const int FrameLockedFieldNumber = 10;
    private bool frameLocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FrameLocked {
      get { return frameLocked_; }
      set {
        frameLocked_ = value;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Geometry.Point> _repeated_points_codec
        = pb::FieldCodec.ForMessage(90, global::Geometry.Point.Parser);
    private readonly pbc::RepeatedField<global::Geometry.Point> points_ = new pbc::RepeatedField<global::Geometry.Point>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Geometry.Point> Points {
      get { return points_; }
    }

    /// <summary>Field number for the "colors" field.</summary>
    public const int ColorsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Std.ColorRGBA> _repeated_colors_codec
        = pb::FieldCodec.ForMessage(98, global::Std.ColorRGBA.Parser);
    private readonly pbc::RepeatedField<global::Std.ColorRGBA> colors_ = new pbc::RepeatedField<global::Std.ColorRGBA>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Std.ColorRGBA> Colors {
      get { return colors_; }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 13;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "meshResource" field.</summary>
    public const int MeshResourceFieldNumber = 14;
    private string meshResource_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeshResource {
      get { return meshResource_; }
      set {
        meshResource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "meshUseEmbeddedMaterials" field.</summary>
    public const int MeshUseEmbeddedMaterialsFieldNumber = 15;
    private bool meshUseEmbeddedMaterials_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MeshUseEmbeddedMaterials {
      get { return meshUseEmbeddedMaterials_; }
      set {
        meshUseEmbeddedMaterials_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Marker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Marker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Ns != other.Ns) return false;
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (Action != other.Action) return false;
      if (!object.Equals(Pose, other.Pose)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Lifetime, other.Lifetime)) return false;
      if (FrameLocked != other.FrameLocked) return false;
      if(!points_.Equals(other.points_)) return false;
      if(!colors_.Equals(other.colors_)) return false;
      if (Text != other.Text) return false;
      if (MeshResource != other.MeshResource) return false;
      if (MeshUseEmbeddedMaterials != other.MeshUseEmbeddedMaterials) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Ns.Length != 0) hash ^= Ns.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (Lifetime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Lifetime);
      if (FrameLocked != false) hash ^= FrameLocked.GetHashCode();
      hash ^= points_.GetHashCode();
      hash ^= colors_.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (MeshResource.Length != 0) hash ^= MeshResource.GetHashCode();
      if (MeshUseEmbeddedMaterials != false) hash ^= MeshUseEmbeddedMaterials.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Ns.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ns);
      }
      if (Id != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (Action != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Action);
      }
      if (pose_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Pose);
      }
      if (scale_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Scale);
      }
      if (color_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Color);
      }
      if (Lifetime != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Lifetime);
      }
      if (FrameLocked != false) {
        output.WriteRawTag(80);
        output.WriteBool(FrameLocked);
      }
      points_.WriteTo(output, _repeated_points_codec);
      colors_.WriteTo(output, _repeated_colors_codec);
      if (Text.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Text);
      }
      if (MeshResource.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(MeshResource);
      }
      if (MeshUseEmbeddedMaterials != false) {
        output.WriteRawTag(120);
        output.WriteBool(MeshUseEmbeddedMaterials);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Ns.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ns);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (Lifetime != 0F) {
        size += 1 + 4;
      }
      if (FrameLocked != false) {
        size += 1 + 1;
      }
      size += points_.CalculateSize(_repeated_points_codec);
      size += colors_.CalculateSize(_repeated_colors_codec);
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (MeshResource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeshResource);
      }
      if (MeshUseEmbeddedMaterials != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Marker other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Std.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Ns.Length != 0) {
        Ns = other.Ns;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          pose_ = new global::Geometry.Pose();
        }
        Pose.MergeFrom(other.Pose);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          scale_ = new global::Geometry.Vector3();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::Std.ColorRGBA();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.Lifetime != 0F) {
        Lifetime = other.Lifetime;
      }
      if (other.FrameLocked != false) {
        FrameLocked = other.FrameLocked;
      }
      points_.Add(other.points_);
      colors_.Add(other.colors_);
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.MeshResource.Length != 0) {
        MeshResource = other.MeshResource;
      }
      if (other.MeshUseEmbeddedMaterials != false) {
        MeshUseEmbeddedMaterials = other.MeshUseEmbeddedMaterials;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Std.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            Ns = input.ReadString();
            break;
          }
          case 24: {
            Id = input.ReadInt32();
            break;
          }
          case 32: {
            type_ = (global::Visualization.Marker.Types.Type) input.ReadEnum();
            break;
          }
          case 40: {
            action_ = (global::Visualization.Marker.Types.Action) input.ReadEnum();
            break;
          }
          case 50: {
            if (pose_ == null) {
              pose_ = new global::Geometry.Pose();
            }
            input.ReadMessage(pose_);
            break;
          }
          case 58: {
            if (scale_ == null) {
              scale_ = new global::Geometry.Vector3();
            }
            input.ReadMessage(scale_);
            break;
          }
          case 66: {
            if (color_ == null) {
              color_ = new global::Std.ColorRGBA();
            }
            input.ReadMessage(color_);
            break;
          }
          case 77: {
            Lifetime = input.ReadFloat();
            break;
          }
          case 80: {
            FrameLocked = input.ReadBool();
            break;
          }
          case 90: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
          case 98: {
            colors_.AddEntriesFrom(input, _repeated_colors_codec);
            break;
          }
          case 106: {
            Text = input.ReadString();
            break;
          }
          case 114: {
            MeshResource = input.ReadString();
            break;
          }
          case 120: {
            MeshUseEmbeddedMaterials = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Marker message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("ARROW")] Arrow = 0,
        [pbr::OriginalName("CUBE")] Cube = 1,
        [pbr::OriginalName("SPHERE")] Sphere = 2,
        [pbr::OriginalName("CYLINDER")] Cylinder = 3,
        [pbr::OriginalName("LINE_STRIP")] LineStrip = 4,
        [pbr::OriginalName("LINE_LIST")] LineList = 5,
        [pbr::OriginalName("CUBE_LIST")] CubeList = 6,
        [pbr::OriginalName("SPHERE_LIST")] SphereList = 7,
        [pbr::OriginalName("POINTS")] Points = 8,
        [pbr::OriginalName("TEXT_VIEW_FACING")] TextViewFacing = 9,
        [pbr::OriginalName("MESH_RESOURCE")] MeshResource = 10,
        [pbr::OriginalName("TRIANGLE_LIST")] TriangleList = 11,
      }

      public enum Action {
        [pbr::OriginalName("ADD")] Add = 0,
        [pbr::OriginalName("MODIFY")] Modify = 1,
        [pbr::OriginalName("DELETE")] Delete = 2,
        [pbr::OriginalName("DELETEALL")] Deleteall = 3,
      }

    }
    #endregion

  }

  public sealed partial class MarkerArray : pb::IMessage<MarkerArray> {
    private static readonly pb::MessageParser<MarkerArray> _parser = new pb::MessageParser<MarkerArray>(() => new MarkerArray());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarkerArray> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Visualization.VisualizationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerArray() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerArray(MarkerArray other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      markers_ = other.markers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerArray Clone() {
      return new MarkerArray(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Std.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Std.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "markers" field.</summary>
    public const int MarkersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Visualization.Marker> _repeated_markers_codec
        = pb::FieldCodec.ForMessage(18, global::Visualization.Marker.Parser);
    private readonly pbc::RepeatedField<global::Visualization.Marker> markers_ = new pbc::RepeatedField<global::Visualization.Marker>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Visualization.Marker> Markers {
      get { return markers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarkerArray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarkerArray other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!markers_.Equals(other.markers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= markers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      markers_.WriteTo(output, _repeated_markers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += markers_.CalculateSize(_repeated_markers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarkerArray other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Std.Header();
        }
        Header.MergeFrom(other.Header);
      }
      markers_.Add(other.markers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Std.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            markers_.AddEntriesFrom(input, _repeated_markers_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
