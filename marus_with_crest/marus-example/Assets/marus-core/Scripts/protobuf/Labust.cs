// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: labust.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Labust {

  /// <summary>Holder for reflection information generated from labust.proto</summary>
  public static partial class LabustReflection {

    #region Descriptor
    /// <summary>File descriptor for labust.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LabustReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxsYWJ1c3QucHJvdG8SBmxhYnVzdBoJc3RkLnByb3RvGg5nZW9tZXRyeS5w",
            "cm90byKNAgoKRlNQYXRoSW5mbxIbCgZoZWFkZXIYASABKAsyCy5zdGQuSGVh",
            "ZGVyEg4KBmRlbHRhUhgCIAEoARIJCgFrGAMgASgBEgsKA3hpUhgEIAEoARIM",
            "CgRkeGlSGAUgASgBEgoKAnBpGAYgASgBEg8KB3BpVGlsZGEYByABKAESHgoD",
            "ZHJQGAggASgLMhEuZ2VvbWV0cnkuVmVjdG9yMxIjCghwb3NpdGlvbhgJIAEo",
            "CzIRLmdlb21ldHJ5LlZlY3RvcjMSJgoLb3JpZW50YXRpb24YCiABKAsyES5n",
            "ZW9tZXRyeS5WZWN0b3IzEhEKCWN1cnZhdHVyZRgLIAEoARIPCgd0b3JzaW9u",
            "GAwgASgBIvwBChdQb2ludGVyUHJpbWl0aXZlU2VydmljZRIOCgZyYWRpdXMY",
            "ASABKAESFgoOdmVydGljYWxPZmZzZXQYAiABKAESKQoOZ3VpZGFuY2VUYXJn",
            "ZXQYAyABKAsyES5nZW9tZXRyeS5WZWN0b3IzEhYKDmd1aWRhbmNlRW5hYmxl",
            "GAQgASgIEhYKDndyYXBwaW5nRW5hYmxlGAUgASgIEhMKC2Zvdkd1aWRhbmNl",
            "GAYgASgIEh0KFXN0cmVhbWxpbmVPcmllbnRhdGlvbhgHIAEoCBIVCg1ndWlk",
            "YW5jZVRvcGljGAggASgJEhMKC3JhZGl1c1RvcGljGAkgASgJIpECChBOYW5v",
            "bW9kZW1SZXF1ZXN0EhsKBmhlYWRlchgBIAEoCzILLnN0ZC5IZWFkZXISLgoH",
            "cmVxVHlwZRgCIAEoDjIdLmxhYnVzdC5OYW5vbW9kZW1SZXF1ZXN0LlR5cGUS",
            "EQoJc2NoZWR1bGVkGAMgASgIEgsKA21zZxgEIAEoCRIKCgJpZBgFIAEoDSKD",
            "AQoEVHlwZRIKCgZCUkRDU1QQABIKCgZVTklDU1QQARIKCgZQSU5HSUQQAhIK",
            "CgZWT0xUSUQQAxIKCgZDSE5HSUQQBBIKCgZTVEFUVVMQBRIMCghVTklTVEFD",
            "SxAGEgsKB1RFU1RNU0cQBxILCgdFQ0hPTVNHEAgSCwoHUVVBTElUWRAJIp4B",
            "ChBOYW5vbW9kZW1QYXlsb2FkEhsKBmhlYWRlchgBIAEoCzILLnN0ZC5IZWFk",
            "ZXISCwoDbXNnGAIgASgJEhAKCHNlbmRlcklkGAMgASgFEi4KB21zZ1R5cGUY",
            "BCABKA4yHS5sYWJ1c3QuTmFub21vZGVtUGF5bG9hZC5UeXBlIh4KBFR5cGUS",
            "CgoGQlJEQ1NUEAASCgoGVU5JQ1NUEAEiWAoOTmFub21vZGVtUmFuZ2USGwoG",
            "aGVhZGVyGAEgASgLMgsuc3RkLkhlYWRlchINCgVyYW5nZRgCIAEoBRIOCgZy",
            "YW5nZU0YAyABKAESCgoCaWQYBCABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Std.StdReflection.Descriptor, global::Geometry.GeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Labust.FSPathInfo), global::Labust.FSPathInfo.Parser, new[]{ "Header", "DeltaR", "K", "XiR", "DxiR", "Pi", "PiTilda", "DrP", "Position", "Orientation", "Curvature", "Torsion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Labust.PointerPrimitiveService), global::Labust.PointerPrimitiveService.Parser, new[]{ "Radius", "VerticalOffset", "GuidanceTarget", "GuidanceEnable", "WrappingEnable", "FovGuidance", "StreamlineOrientation", "GuidanceTopic", "RadiusTopic" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Labust.NanomodemRequest), global::Labust.NanomodemRequest.Parser, new[]{ "Header", "ReqType", "Scheduled", "Msg", "Id" }, null, new[]{ typeof(global::Labust.NanomodemRequest.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Labust.NanomodemPayload), global::Labust.NanomodemPayload.Parser, new[]{ "Header", "Msg", "SenderId", "MsgType" }, null, new[]{ typeof(global::Labust.NanomodemPayload.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Labust.NanomodemRange), global::Labust.NanomodemRange.Parser, new[]{ "Header", "Range", "RangeM", "Id" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FSPathInfo : pb::IMessage<FSPathInfo> {
    private static readonly pb::MessageParser<FSPathInfo> _parser = new pb::MessageParser<FSPathInfo>(() => new FSPathInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FSPathInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Labust.LabustReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FSPathInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FSPathInfo(FSPathInfo other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      deltaR_ = other.deltaR_;
      k_ = other.k_;
      xiR_ = other.xiR_;
      dxiR_ = other.dxiR_;
      pi_ = other.pi_;
      piTilda_ = other.piTilda_;
      drP_ = other.drP_ != null ? other.drP_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      orientation_ = other.orientation_ != null ? other.orientation_.Clone() : null;
      curvature_ = other.curvature_;
      torsion_ = other.torsion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FSPathInfo Clone() {
      return new FSPathInfo(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Std.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Std.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "deltaR" field.</summary>
    public const int DeltaRFieldNumber = 2;
    private double deltaR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DeltaR {
      get { return deltaR_; }
      set {
        deltaR_ = value;
      }
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 3;
    private double k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    /// <summary>Field number for the "xiR" field.</summary>
    public const int XiRFieldNumber = 4;
    private double xiR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XiR {
      get { return xiR_; }
      set {
        xiR_ = value;
      }
    }

    /// <summary>Field number for the "dxiR" field.</summary>
    public const int DxiRFieldNumber = 5;
    private double dxiR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DxiR {
      get { return dxiR_; }
      set {
        dxiR_ = value;
      }
    }

    /// <summary>Field number for the "pi" field.</summary>
    public const int PiFieldNumber = 6;
    private double pi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pi {
      get { return pi_; }
      set {
        pi_ = value;
      }
    }

    /// <summary>Field number for the "piTilda" field.</summary>
    public const int PiTildaFieldNumber = 7;
    private double piTilda_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PiTilda {
      get { return piTilda_; }
      set {
        piTilda_ = value;
      }
    }

    /// <summary>Field number for the "drP" field.</summary>
    public const int DrPFieldNumber = 8;
    private global::Geometry.Vector3 drP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Geometry.Vector3 DrP {
      get { return drP_; }
      set {
        drP_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 9;
    private global::Geometry.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Geometry.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 10;
    private global::Geometry.Vector3 orientation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Geometry.Vector3 Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    /// <summary>Field number for the "curvature" field.</summary>
    public const int CurvatureFieldNumber = 11;
    private double curvature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Curvature {
      get { return curvature_; }
      set {
        curvature_ = value;
      }
    }

    /// <summary>Field number for the "torsion" field.</summary>
    public const int TorsionFieldNumber = 12;
    private double torsion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Torsion {
      get { return torsion_; }
      set {
        torsion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FSPathInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FSPathInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DeltaR, other.DeltaR)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(K, other.K)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(XiR, other.XiR)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DxiR, other.DxiR)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Pi, other.Pi)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PiTilda, other.PiTilda)) return false;
      if (!object.Equals(DrP, other.DrP)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Orientation, other.Orientation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Curvature, other.Curvature)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Torsion, other.Torsion)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (DeltaR != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DeltaR);
      if (K != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(K);
      if (XiR != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(XiR);
      if (DxiR != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DxiR);
      if (Pi != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Pi);
      if (PiTilda != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PiTilda);
      if (drP_ != null) hash ^= DrP.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (orientation_ != null) hash ^= Orientation.GetHashCode();
      if (Curvature != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Curvature);
      if (Torsion != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Torsion);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (DeltaR != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(DeltaR);
      }
      if (K != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(K);
      }
      if (XiR != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(XiR);
      }
      if (DxiR != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(DxiR);
      }
      if (Pi != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Pi);
      }
      if (PiTilda != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(PiTilda);
      }
      if (drP_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(DrP);
      }
      if (position_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Position);
      }
      if (orientation_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Orientation);
      }
      if (Curvature != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Curvature);
      }
      if (Torsion != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Torsion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (DeltaR != 0D) {
        size += 1 + 8;
      }
      if (K != 0D) {
        size += 1 + 8;
      }
      if (XiR != 0D) {
        size += 1 + 8;
      }
      if (DxiR != 0D) {
        size += 1 + 8;
      }
      if (Pi != 0D) {
        size += 1 + 8;
      }
      if (PiTilda != 0D) {
        size += 1 + 8;
      }
      if (drP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrP);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (orientation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
      }
      if (Curvature != 0D) {
        size += 1 + 8;
      }
      if (Torsion != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FSPathInfo other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Std.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.DeltaR != 0D) {
        DeltaR = other.DeltaR;
      }
      if (other.K != 0D) {
        K = other.K;
      }
      if (other.XiR != 0D) {
        XiR = other.XiR;
      }
      if (other.DxiR != 0D) {
        DxiR = other.DxiR;
      }
      if (other.Pi != 0D) {
        Pi = other.Pi;
      }
      if (other.PiTilda != 0D) {
        PiTilda = other.PiTilda;
      }
      if (other.drP_ != null) {
        if (drP_ == null) {
          drP_ = new global::Geometry.Vector3();
        }
        DrP.MergeFrom(other.DrP);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Geometry.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.orientation_ != null) {
        if (orientation_ == null) {
          orientation_ = new global::Geometry.Vector3();
        }
        Orientation.MergeFrom(other.Orientation);
      }
      if (other.Curvature != 0D) {
        Curvature = other.Curvature;
      }
      if (other.Torsion != 0D) {
        Torsion = other.Torsion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Std.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 17: {
            DeltaR = input.ReadDouble();
            break;
          }
          case 25: {
            K = input.ReadDouble();
            break;
          }
          case 33: {
            XiR = input.ReadDouble();
            break;
          }
          case 41: {
            DxiR = input.ReadDouble();
            break;
          }
          case 49: {
            Pi = input.ReadDouble();
            break;
          }
          case 57: {
            PiTilda = input.ReadDouble();
            break;
          }
          case 66: {
            if (drP_ == null) {
              drP_ = new global::Geometry.Vector3();
            }
            input.ReadMessage(drP_);
            break;
          }
          case 74: {
            if (position_ == null) {
              position_ = new global::Geometry.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 82: {
            if (orientation_ == null) {
              orientation_ = new global::Geometry.Vector3();
            }
            input.ReadMessage(orientation_);
            break;
          }
          case 89: {
            Curvature = input.ReadDouble();
            break;
          }
          case 97: {
            Torsion = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PointerPrimitiveService : pb::IMessage<PointerPrimitiveService> {
    private static readonly pb::MessageParser<PointerPrimitiveService> _parser = new pb::MessageParser<PointerPrimitiveService>(() => new PointerPrimitiveService());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointerPrimitiveService> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Labust.LabustReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointerPrimitiveService() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointerPrimitiveService(PointerPrimitiveService other) : this() {
      radius_ = other.radius_;
      verticalOffset_ = other.verticalOffset_;
      guidanceTarget_ = other.guidanceTarget_ != null ? other.guidanceTarget_.Clone() : null;
      guidanceEnable_ = other.guidanceEnable_;
      wrappingEnable_ = other.wrappingEnable_;
      fovGuidance_ = other.fovGuidance_;
      streamlineOrientation_ = other.streamlineOrientation_;
      guidanceTopic_ = other.guidanceTopic_;
      radiusTopic_ = other.radiusTopic_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointerPrimitiveService Clone() {
      return new PointerPrimitiveService(this);
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 1;
    private double radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "verticalOffset" field.</summary>
    public const int VerticalOffsetFieldNumber = 2;
    private double verticalOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VerticalOffset {
      get { return verticalOffset_; }
      set {
        verticalOffset_ = value;
      }
    }

    /// <summary>Field number for the "guidanceTarget" field.</summary>
    public const int GuidanceTargetFieldNumber = 3;
    private global::Geometry.Vector3 guidanceTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Geometry.Vector3 GuidanceTarget {
      get { return guidanceTarget_; }
      set {
        guidanceTarget_ = value;
      }
    }

    /// <summary>Field number for the "guidanceEnable" field.</summary>
    public const int GuidanceEnableFieldNumber = 4;
    private bool guidanceEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GuidanceEnable {
      get { return guidanceEnable_; }
      set {
        guidanceEnable_ = value;
      }
    }

    /// <summary>Field number for the "wrappingEnable" field.</summary>
    public const int WrappingEnableFieldNumber = 5;
    private bool wrappingEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WrappingEnable {
      get { return wrappingEnable_; }
      set {
        wrappingEnable_ = value;
      }
    }

    /// <summary>Field number for the "fovGuidance" field.</summary>
    public const int FovGuidanceFieldNumber = 6;
    private bool fovGuidance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FovGuidance {
      get { return fovGuidance_; }
      set {
        fovGuidance_ = value;
      }
    }

    /// <summary>Field number for the "streamlineOrientation" field.</summary>
    public const int StreamlineOrientationFieldNumber = 7;
    private bool streamlineOrientation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StreamlineOrientation {
      get { return streamlineOrientation_; }
      set {
        streamlineOrientation_ = value;
      }
    }

    /// <summary>Field number for the "guidanceTopic" field.</summary>
    public const int GuidanceTopicFieldNumber = 8;
    private string guidanceTopic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuidanceTopic {
      get { return guidanceTopic_; }
      set {
        guidanceTopic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "radiusTopic" field.</summary>
    public const int RadiusTopicFieldNumber = 9;
    private string radiusTopic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RadiusTopic {
      get { return radiusTopic_; }
      set {
        radiusTopic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointerPrimitiveService);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointerPrimitiveService other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Radius, other.Radius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VerticalOffset, other.VerticalOffset)) return false;
      if (!object.Equals(GuidanceTarget, other.GuidanceTarget)) return false;
      if (GuidanceEnable != other.GuidanceEnable) return false;
      if (WrappingEnable != other.WrappingEnable) return false;
      if (FovGuidance != other.FovGuidance) return false;
      if (StreamlineOrientation != other.StreamlineOrientation) return false;
      if (GuidanceTopic != other.GuidanceTopic) return false;
      if (RadiusTopic != other.RadiusTopic) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Radius != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Radius);
      if (VerticalOffset != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VerticalOffset);
      if (guidanceTarget_ != null) hash ^= GuidanceTarget.GetHashCode();
      if (GuidanceEnable != false) hash ^= GuidanceEnable.GetHashCode();
      if (WrappingEnable != false) hash ^= WrappingEnable.GetHashCode();
      if (FovGuidance != false) hash ^= FovGuidance.GetHashCode();
      if (StreamlineOrientation != false) hash ^= StreamlineOrientation.GetHashCode();
      if (GuidanceTopic.Length != 0) hash ^= GuidanceTopic.GetHashCode();
      if (RadiusTopic.Length != 0) hash ^= RadiusTopic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Radius != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Radius);
      }
      if (VerticalOffset != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(VerticalOffset);
      }
      if (guidanceTarget_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GuidanceTarget);
      }
      if (GuidanceEnable != false) {
        output.WriteRawTag(32);
        output.WriteBool(GuidanceEnable);
      }
      if (WrappingEnable != false) {
        output.WriteRawTag(40);
        output.WriteBool(WrappingEnable);
      }
      if (FovGuidance != false) {
        output.WriteRawTag(48);
        output.WriteBool(FovGuidance);
      }
      if (StreamlineOrientation != false) {
        output.WriteRawTag(56);
        output.WriteBool(StreamlineOrientation);
      }
      if (GuidanceTopic.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(GuidanceTopic);
      }
      if (RadiusTopic.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(RadiusTopic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Radius != 0D) {
        size += 1 + 8;
      }
      if (VerticalOffset != 0D) {
        size += 1 + 8;
      }
      if (guidanceTarget_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuidanceTarget);
      }
      if (GuidanceEnable != false) {
        size += 1 + 1;
      }
      if (WrappingEnable != false) {
        size += 1 + 1;
      }
      if (FovGuidance != false) {
        size += 1 + 1;
      }
      if (StreamlineOrientation != false) {
        size += 1 + 1;
      }
      if (GuidanceTopic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuidanceTopic);
      }
      if (RadiusTopic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RadiusTopic);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointerPrimitiveService other) {
      if (other == null) {
        return;
      }
      if (other.Radius != 0D) {
        Radius = other.Radius;
      }
      if (other.VerticalOffset != 0D) {
        VerticalOffset = other.VerticalOffset;
      }
      if (other.guidanceTarget_ != null) {
        if (guidanceTarget_ == null) {
          guidanceTarget_ = new global::Geometry.Vector3();
        }
        GuidanceTarget.MergeFrom(other.GuidanceTarget);
      }
      if (other.GuidanceEnable != false) {
        GuidanceEnable = other.GuidanceEnable;
      }
      if (other.WrappingEnable != false) {
        WrappingEnable = other.WrappingEnable;
      }
      if (other.FovGuidance != false) {
        FovGuidance = other.FovGuidance;
      }
      if (other.StreamlineOrientation != false) {
        StreamlineOrientation = other.StreamlineOrientation;
      }
      if (other.GuidanceTopic.Length != 0) {
        GuidanceTopic = other.GuidanceTopic;
      }
      if (other.RadiusTopic.Length != 0) {
        RadiusTopic = other.RadiusTopic;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Radius = input.ReadDouble();
            break;
          }
          case 17: {
            VerticalOffset = input.ReadDouble();
            break;
          }
          case 26: {
            if (guidanceTarget_ == null) {
              guidanceTarget_ = new global::Geometry.Vector3();
            }
            input.ReadMessage(guidanceTarget_);
            break;
          }
          case 32: {
            GuidanceEnable = input.ReadBool();
            break;
          }
          case 40: {
            WrappingEnable = input.ReadBool();
            break;
          }
          case 48: {
            FovGuidance = input.ReadBool();
            break;
          }
          case 56: {
            StreamlineOrientation = input.ReadBool();
            break;
          }
          case 66: {
            GuidanceTopic = input.ReadString();
            break;
          }
          case 74: {
            RadiusTopic = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NanomodemRequest : pb::IMessage<NanomodemRequest> {
    private static readonly pb::MessageParser<NanomodemRequest> _parser = new pb::MessageParser<NanomodemRequest>(() => new NanomodemRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NanomodemRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Labust.LabustReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NanomodemRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NanomodemRequest(NanomodemRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      reqType_ = other.reqType_;
      scheduled_ = other.scheduled_;
      msg_ = other.msg_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NanomodemRequest Clone() {
      return new NanomodemRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Std.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Std.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "reqType" field.</summary>
    public const int ReqTypeFieldNumber = 2;
    private global::Labust.NanomodemRequest.Types.Type reqType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Labust.NanomodemRequest.Types.Type ReqType {
      get { return reqType_; }
      set {
        reqType_ = value;
      }
    }

    /// <summary>Field number for the "scheduled" field.</summary>
    public const int ScheduledFieldNumber = 3;
    private bool scheduled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Scheduled {
      get { return scheduled_; }
      set {
        scheduled_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 4;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 5;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NanomodemRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NanomodemRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (ReqType != other.ReqType) return false;
      if (Scheduled != other.Scheduled) return false;
      if (Msg != other.Msg) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (ReqType != 0) hash ^= ReqType.GetHashCode();
      if (Scheduled != false) hash ^= Scheduled.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (ReqType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ReqType);
      }
      if (Scheduled != false) {
        output.WriteRawTag(24);
        output.WriteBool(Scheduled);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Msg);
      }
      if (Id != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (ReqType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReqType);
      }
      if (Scheduled != false) {
        size += 1 + 1;
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NanomodemRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Std.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.ReqType != 0) {
        ReqType = other.ReqType;
      }
      if (other.Scheduled != false) {
        Scheduled = other.Scheduled;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Std.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 16: {
            reqType_ = (global::Labust.NanomodemRequest.Types.Type) input.ReadEnum();
            break;
          }
          case 24: {
            Scheduled = input.ReadBool();
            break;
          }
          case 34: {
            Msg = input.ReadString();
            break;
          }
          case 40: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NanomodemRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("BRDCST")] Brdcst = 0,
        [pbr::OriginalName("UNICST")] Unicst = 1,
        [pbr::OriginalName("PINGID")] Pingid = 2,
        [pbr::OriginalName("VOLTID")] Voltid = 3,
        [pbr::OriginalName("CHNGID")] Chngid = 4,
        [pbr::OriginalName("STATUS")] Status = 5,
        [pbr::OriginalName("UNISTACK")] Unistack = 6,
        [pbr::OriginalName("TESTMSG")] Testmsg = 7,
        [pbr::OriginalName("ECHOMSG")] Echomsg = 8,
        [pbr::OriginalName("QUALITY")] Quality = 9,
      }

    }
    #endregion

  }

  public sealed partial class NanomodemPayload : pb::IMessage<NanomodemPayload> {
    private static readonly pb::MessageParser<NanomodemPayload> _parser = new pb::MessageParser<NanomodemPayload>(() => new NanomodemPayload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NanomodemPayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Labust.LabustReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NanomodemPayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NanomodemPayload(NanomodemPayload other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      msg_ = other.msg_;
      senderId_ = other.senderId_;
      msgType_ = other.msgType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NanomodemPayload Clone() {
      return new NanomodemPayload(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Std.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Std.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "senderId" field.</summary>
    public const int SenderIdFieldNumber = 3;
    private int senderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SenderId {
      get { return senderId_; }
      set {
        senderId_ = value;
      }
    }

    /// <summary>Field number for the "msgType" field.</summary>
    public const int MsgTypeFieldNumber = 4;
    private global::Labust.NanomodemPayload.Types.Type msgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Labust.NanomodemPayload.Types.Type MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NanomodemPayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NanomodemPayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Msg != other.Msg) return false;
      if (SenderId != other.SenderId) return false;
      if (MsgType != other.MsgType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (SenderId != 0) hash ^= SenderId.GetHashCode();
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (SenderId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SenderId);
      }
      if (MsgType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MsgType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (SenderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SenderId);
      }
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NanomodemPayload other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Std.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.SenderId != 0) {
        SenderId = other.SenderId;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Std.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
          case 24: {
            SenderId = input.ReadInt32();
            break;
          }
          case 32: {
            msgType_ = (global::Labust.NanomodemPayload.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NanomodemPayload message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("BRDCST")] Brdcst = 0,
        [pbr::OriginalName("UNICST")] Unicst = 1,
      }

    }
    #endregion

  }

  public sealed partial class NanomodemRange : pb::IMessage<NanomodemRange> {
    private static readonly pb::MessageParser<NanomodemRange> _parser = new pb::MessageParser<NanomodemRange>(() => new NanomodemRange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NanomodemRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Labust.LabustReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NanomodemRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NanomodemRange(NanomodemRange other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      range_ = other.range_;
      rangeM_ = other.rangeM_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NanomodemRange Clone() {
      return new NanomodemRange(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Std.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Std.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 2;
    private int range_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "rangeM" field.</summary>
    public const int RangeMFieldNumber = 3;
    private double rangeM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RangeM {
      get { return rangeM_; }
      set {
        rangeM_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 4;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NanomodemRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NanomodemRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Range != other.Range) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RangeM, other.RangeM)) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Range != 0) hash ^= Range.GetHashCode();
      if (RangeM != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RangeM);
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Range != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Range);
      }
      if (RangeM != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(RangeM);
      }
      if (Id != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Range != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Range);
      }
      if (RangeM != 0D) {
        size += 1 + 8;
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NanomodemRange other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Std.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Range != 0) {
        Range = other.Range;
      }
      if (other.RangeM != 0D) {
        RangeM = other.RangeM;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Std.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 16: {
            Range = input.ReadInt32();
            break;
          }
          case 25: {
            RangeM = input.ReadDouble();
            break;
          }
          case 32: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
