// Generated by gencpp from file sonar/TwoSonar.msg
// DO NOT EDIT!


#ifndef SONAR_MESSAGE_TWOSONAR_H
#define SONAR_MESSAGE_TWOSONAR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sonar
{
template <class ContainerAllocator>
struct TwoSonar_
{
  typedef TwoSonar_<ContainerAllocator> Type;

  TwoSonar_()
    : header()
    , distance_1(0.0)
    , confidence_1(0.0)
    , distance_2(0.0)
    , confidence_2(0.0)  {
    }
  TwoSonar_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , distance_1(0.0)
    , confidence_1(0.0)
    , distance_2(0.0)
    , confidence_2(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _distance_1_type;
  _distance_1_type distance_1;

   typedef float _confidence_1_type;
  _confidence_1_type confidence_1;

   typedef float _distance_2_type;
  _distance_2_type distance_2;

   typedef float _confidence_2_type;
  _confidence_2_type confidence_2;





  typedef boost::shared_ptr< ::sonar::TwoSonar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sonar::TwoSonar_<ContainerAllocator> const> ConstPtr;

}; // struct TwoSonar_

typedef ::sonar::TwoSonar_<std::allocator<void> > TwoSonar;

typedef boost::shared_ptr< ::sonar::TwoSonar > TwoSonarPtr;
typedef boost::shared_ptr< ::sonar::TwoSonar const> TwoSonarConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sonar::TwoSonar_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sonar::TwoSonar_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sonar::TwoSonar_<ContainerAllocator1> & lhs, const ::sonar::TwoSonar_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.distance_1 == rhs.distance_1 &&
    lhs.confidence_1 == rhs.confidence_1 &&
    lhs.distance_2 == rhs.distance_2 &&
    lhs.confidence_2 == rhs.confidence_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sonar::TwoSonar_<ContainerAllocator1> & lhs, const ::sonar::TwoSonar_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sonar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sonar::TwoSonar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sonar::TwoSonar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sonar::TwoSonar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sonar::TwoSonar_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sonar::TwoSonar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sonar::TwoSonar_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sonar::TwoSonar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "511d902ba05d070d68faabdedabf3289";
  }

  static const char* value(const ::sonar::TwoSonar_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x511d902ba05d070dULL;
  static const uint64_t static_value2 = 0x68faabdedabf3289ULL;
};

template<class ContainerAllocator>
struct DataType< ::sonar::TwoSonar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sonar/TwoSonar";
  }

  static const char* value(const ::sonar::TwoSonar_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sonar::TwoSonar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header \n"
"float32 distance_1 \n"
"float32 confidence_1\n"
"float32 distance_2\n"
"float32 confidence_2\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::sonar::TwoSonar_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sonar::TwoSonar_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.distance_1);
      stream.next(m.confidence_1);
      stream.next(m.distance_2);
      stream.next(m.confidence_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TwoSonar_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sonar::TwoSonar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sonar::TwoSonar_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "distance_1: ";
    Printer<float>::stream(s, indent + "  ", v.distance_1);
    s << indent << "confidence_1: ";
    Printer<float>::stream(s, indent + "  ", v.confidence_1);
    s << indent << "distance_2: ";
    Printer<float>::stream(s, indent + "  ", v.distance_2);
    s << indent << "confidence_2: ";
    Printer<float>::stream(s, indent + "  ", v.confidence_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SONAR_MESSAGE_TWOSONAR_H
