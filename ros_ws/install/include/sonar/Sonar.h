// Generated by gencpp from file sonar/Sonar.msg
// DO NOT EDIT!


#ifndef SONAR_MESSAGE_SONAR_H
#define SONAR_MESSAGE_SONAR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sonar
{
template <class ContainerAllocator>
struct Sonar_
{
  typedef Sonar_<ContainerAllocator> Type;

  Sonar_()
    : header()
    , distance(0.0)
    , confidence(0.0)
    , transmit_duration(0.0)
    , ping_number(0.0)
    , scan_start(0.0)
    , scan_length(0.0)
    , gain_setting(0.0)
    , profile_data()  {
    }
  Sonar_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , distance(0.0)
    , confidence(0.0)
    , transmit_duration(0.0)
    , ping_number(0.0)
    , scan_start(0.0)
    , scan_length(0.0)
    , gain_setting(0.0)
    , profile_data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef float _transmit_duration_type;
  _transmit_duration_type transmit_duration;

   typedef float _ping_number_type;
  _ping_number_type ping_number;

   typedef float _scan_start_type;
  _scan_start_type scan_start;

   typedef float _scan_length_type;
  _scan_length_type scan_length;

   typedef float _gain_setting_type;
  _gain_setting_type gain_setting;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _profile_data_type;
  _profile_data_type profile_data;





  typedef boost::shared_ptr< ::sonar::Sonar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sonar::Sonar_<ContainerAllocator> const> ConstPtr;

}; // struct Sonar_

typedef ::sonar::Sonar_<std::allocator<void> > Sonar;

typedef boost::shared_ptr< ::sonar::Sonar > SonarPtr;
typedef boost::shared_ptr< ::sonar::Sonar const> SonarConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sonar::Sonar_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sonar::Sonar_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sonar::Sonar_<ContainerAllocator1> & lhs, const ::sonar::Sonar_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.distance == rhs.distance &&
    lhs.confidence == rhs.confidence &&
    lhs.transmit_duration == rhs.transmit_duration &&
    lhs.ping_number == rhs.ping_number &&
    lhs.scan_start == rhs.scan_start &&
    lhs.scan_length == rhs.scan_length &&
    lhs.gain_setting == rhs.gain_setting &&
    lhs.profile_data == rhs.profile_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sonar::Sonar_<ContainerAllocator1> & lhs, const ::sonar::Sonar_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sonar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sonar::Sonar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sonar::Sonar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sonar::Sonar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sonar::Sonar_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sonar::Sonar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sonar::Sonar_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sonar::Sonar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e4a4d737f58de7be4dcffacf14f18c8";
  }

  static const char* value(const ::sonar::Sonar_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e4a4d737f58de7bULL;
  static const uint64_t static_value2 = 0xe4dcffacf14f18c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::sonar::Sonar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sonar/Sonar";
  }

  static const char* value(const ::sonar::Sonar_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sonar::Sonar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header \n"
"float32 distance \n"
"float32 confidence\n"
"float32 transmit_duration\n"
"float32 ping_number\n"
"float32 scan_start\n"
"float32 scan_length\n"
"float32 gain_setting\n"
"uint8[] profile_data\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::sonar::Sonar_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sonar::Sonar_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.distance);
      stream.next(m.confidence);
      stream.next(m.transmit_duration);
      stream.next(m.ping_number);
      stream.next(m.scan_start);
      stream.next(m.scan_length);
      stream.next(m.gain_setting);
      stream.next(m.profile_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sonar_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sonar::Sonar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sonar::Sonar_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "transmit_duration: ";
    Printer<float>::stream(s, indent + "  ", v.transmit_duration);
    s << indent << "ping_number: ";
    Printer<float>::stream(s, indent + "  ", v.ping_number);
    s << indent << "scan_start: ";
    Printer<float>::stream(s, indent + "  ", v.scan_start);
    s << indent << "scan_length: ";
    Printer<float>::stream(s, indent + "  ", v.scan_length);
    s << indent << "gain_setting: ";
    Printer<float>::stream(s, indent + "  ", v.gain_setting);
    s << indent << "profile_data[]" << std::endl;
    for (size_t i = 0; i < v.profile_data.size(); ++i)
    {
      s << indent << "  profile_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.profile_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SONAR_MESSAGE_SONAR_H
